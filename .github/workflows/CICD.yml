name: CI - Python

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 1. Install Vault CLI
      - name: Install Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault jq -y

      # 2. Authenticate to Vault
      - name: Authenticate to Vault
        run: |
          echo "${{ secrets.VAULT_TOKEN }}" > token.txt
          export VAULT_ADDR="https://vault-cluster-private-vault-2ae815c5.e1808949.z1.hashicorp.cloud:8200"
          export VAULT_NAMESPACE="admin"
          export VAULT_TOKEN=$(cat token.txt)

          # Get secrets from Vault
          vault kv get -namespace=admin -mount=kv -format=json secret \
          | jq -r '.data.data' > vault_secrets.json

          # Export values
          echo "JFROG_REGISTRY=$(jq -r .JFROG_REGISTRY vault_secrets.json)" >> $GITHUB_ENV
          echo "JFROG_USERNAME=$(jq -r .JFROG_USERNAME vault_secrets.json)" >> $GITHUB_ENV
          echo "JFROG_ACCESS_TOKEN=$(jq -r .JFROG_ACCESS_TOKEN vault_secrets.json)" >> $GITHUB_ENV
          echo "JFROG_REPO=$(jq -r .JFROG_REPO vault_secrets.json)" >> $GITHUB_ENV

      # 3. Mask secrets in logs
      - name: Mask Vault secrets
        run: |
          echo "::add-mask::$JFROG_REGISTRY"
          echo "::add-mask::$JFROG_USERNAME"
          echo "::add-mask::$JFROG_ACCESS_TOKEN"
          echo "::add-mask::$JFROG_REPO"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest || true

      - name: Login to JFrog Docker Registry
        run: echo "${JFROG_ACCESS_TOKEN}" | docker login $JFROG_REGISTRY -u "$JFROG_USERNAME" --password-stdin

      - name: Build Docker Image
        run: docker build -t $JFROG_REPO/flask-app:latest .

      - name: Push Docker Image
        run: docker push $JFROG_REPO/flask-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Log in to JFrog Docker Registry
        run: echo "${JFROG_ACCESS_TOKEN}" | docker login $JFROG_REGISTRY -u "$JFROG_USERNAME" --password-stdin

      - name: Pull latest image
        run: docker pull $JFROG_REPO/flask-app:latest

      - name: Stop existing container (if running)
        run: docker rm -f flask-app || true

      - name: Run new container
        run: |
          docker run -d --name flask-app \
            -p 5000:5000 \
            $JFROG_REPO/flask-app:latest

      - name: Wait for container startup
        run: |
          echo "Waiting for container to be ready..."
          sleep 30
          docker ps -a
          docker logs flask-app

      - name: Health Check
        run: |
          for i in {1..10}; do
            echo "Checking health endpoint... attempt $i"
            if curl -sSf http://localhost:5000/health > /dev/null; then
              echo "✅ Health check passed"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Health check failed after 10 attempts"
          docker logs flask-app
          exit 1
