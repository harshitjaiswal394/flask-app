name: CI - Python

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev 
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest || true

      - name: Build package
        run: |
          pip install build
          python -m build

      - name: Upload to JFrog PyPI
        run: |
          pip install twine
          echo "Uploading to: ${{ secrets.JFROG_URL }}/api/pypi/python-local/"
          twine upload \
            --repository-url "${{ secrets.JFROG_URL }}/api/pypi/python-local/" \
            -u "${{ secrets.JFROG_USERNAME }}" \
            -p "${{ secrets.JFROG_PASSWORD }}" \
            dist/*

  deploy:
    needs: build
    runs-on: self-hosted
    environment: dev
    steps:
      - name: Log in to JFrog Docker Registry
        shell: powershell
        run: |
          $Registry = "${{ secrets.JFROG_URLS }}"
          $Username = "${{ secrets.JFROG_USERNAME }}"
          $Password = "${{ secrets.JFROG_PASSWORDS }}"

          if ([string]::IsNullOrEmpty($Password)) {
            Write-Error "JFROG_PASSWORDS secret is missing!"
            exit 1
          }

          Write-Host "Logging into JFrog registry $Registry as $Username..."
          $Password | docker login $Registry -u $Username --password-stdin

      - name: Pull latest image
        shell: powershell
        run: docker pull ${{ secrets.JFROG_URLS }}/flask-app:latest

      - name: Stop existing container
        shell: powershell
        run: |
          if (docker ps -q -f name=flask-app) {
            docker stop flask-app
            docker rm flask-app
          }

      - name: Run new container
        shell: powershell
        run: docker run -d --name flask-app -p 5000:5000 ${{ secrets.JFROG_URLS }}/flask-app:latest